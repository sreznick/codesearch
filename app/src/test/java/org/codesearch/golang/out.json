[
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "package",
            "package.id",
            "package.id.antlr"
        ],
        "line": 5,
        "json": {
            "package": {
                "id": "antlr"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"bytes\""
        ],
        "line": 8,
        "json": {
            "import": {
                "path": "\"bytes\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"errors\""
        ],
        "line": 9,
        "json": {
            "import": {
                "path": "\"errors\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"fmt\""
        ],
        "line": 10,
        "json": {
            "import": {
                "path": "\"fmt\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"math/bits\""
        ],
        "line": 11,
        "json": {
            "import": {
                "path": "\"math/bits\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"os\""
        ],
        "line": 12,
        "json": {
            "import": {
                "path": "\"os\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"strconv\""
        ],
        "line": 13,
        "json": {
            "import": {
                "path": "\"strconv\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"strings\""
        ],
        "line": 14,
        "json": {
            "import": {
                "path": "\"strings\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "import",
            "import.path",
            "import.path.\"syscall\""
        ],
        "line": 15,
        "json": {
            "import": {
                "path": "\"syscall\""
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.intMin",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.a",
            "function.signature.param_list.[].param.id_list.[0].id.a",
            "function.signature.param_list.[0].param.id_list.[].id.a",
            "function.signature.param_list.[].param.id_list.[].id.a",
            "function.signature.param_list.[0].param.id_list.[1].id",
            "function.signature.param_list.[].param.id_list.[1].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[1].id.b",
            "function.signature.param_list.[].param.id_list.[1].id.b",
            "function.signature.param_list.[0].param.id_list.[].id.b",
            "function.signature.param_list.[].param.id_list.[].id.b",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 18,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "a"
                                    },
                                    {
                                        "id": "b"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "intMin"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 19,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 19,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 20,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 22,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.intMax",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.a",
            "function.signature.param_list.[].param.id_list.[0].id.a",
            "function.signature.param_list.[0].param.id_list.[].id.a",
            "function.signature.param_list.[].param.id_list.[].id.a",
            "function.signature.param_list.[0].param.id_list.[1].id",
            "function.signature.param_list.[].param.id_list.[1].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[1].id.b",
            "function.signature.param_list.[].param.id_list.[1].id.b",
            "function.signature.param_list.[0].param.id_list.[].id.b",
            "function.signature.param_list.[].param.id_list.[].id.b",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 25,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "a"
                                    },
                                    {
                                        "id": "b"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "intMax"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 26,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 26,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 27,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 29,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.type",
            "declaration.type.id",
            "declaration.type.id.IntStack",
            "declaration.type.type",
            "declaration.type.type.lit",
            "declaration.type.type.lit.slice",
            "declaration.type.type.lit.slice.type",
            "declaration.type.type.lit.slice.type.name",
            "declaration.type.type.lit.slice.type.name.id",
            "declaration.type.type.lit.slice.type.name.id.int"
        ],
        "line": 34,
        "json": {
            "declaration": {
                "type": {
                    "id": "IntStack",
                    "type": {
                        "lit": {
                            "slice": {
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.var",
            "declaration.var.id",
            "declaration.var.id.ErrEmptyStack"
        ],
        "line": 36,
        "json": {
            "declaration": {
                "var": {
                    "id": "ErrEmptyStack"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.errors"
        ],
        "line": 36,
        "json": {
            "expression": {
                "operand": {
                    "id": "errors"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"stack is empty\""
        ],
        "line": 36,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"stack is empty\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"stack is empty\""
        ],
        "line": 36,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"stack is empty\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.IntStack",
            "method.receiver.[].param.type.lit.pointer.type.name.id.IntStack",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.s",
            "method.receiver.[].param.id_list.[0].id.s",
            "method.receiver.[0].param.id_list.[].id.s",
            "method.receiver.[].param.id_list.[].id.s",
            "method.id",
            "method.id.Pop",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.param_list",
            "method.signature.result.param_list.[0].param",
            "method.signature.result.param_list.[].param",
            "method.signature.result.param_list.[0].param.type",
            "method.signature.result.param_list.[].param.type",
            "method.signature.result.param_list.[0].param.type.name",
            "method.signature.result.param_list.[].param.type.name",
            "method.signature.result.param_list.[0].param.type.name.id",
            "method.signature.result.param_list.[].param.type.name.id",
            "method.signature.result.param_list.[0].param.type.name.id.int",
            "method.signature.result.param_list.[].param.type.name.id.int",
            "method.signature.result.param_list.[1].param",
            "method.signature.result.param_list.[].param",
            "method.signature.result.param_list.[1].param.type",
            "method.signature.result.param_list.[].param.type",
            "method.signature.result.param_list.[1].param.type.name",
            "method.signature.result.param_list.[].param.type.name",
            "method.signature.result.param_list.[1].param.type.name.id",
            "method.signature.result.param_list.[].param.type.name.id",
            "method.signature.result.param_list.[1].param.type.name.id.error",
            "method.signature.result.param_list.[].param.type.name.id.error"
        ],
        "line": 38,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "s"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "IntStack"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "param_list": [
                            {
                                "param": {
                                    "type": {
                                        "name": {
                                            "id": "int"
                                        }
                                    }
                                }
                            },
                            {
                                "param": {
                                    "type": {
                                        "name": {
                                            "id": "error"
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "param_list": []
                },
                "id": "Pop"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 39,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 39,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 39,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 39,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.l"
        ],
        "line": 40,
        "json": {
            "expression": {
                "operand": {
                    "id": "l"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 40,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 40,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 41,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 41,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.ErrEmptyStack"
        ],
        "line": 41,
        "json": {
            "expression": {
                "operand": {
                    "id": "ErrEmptyStack"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 43,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 43,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.l"
        ],
        "line": 43,
        "json": {
            "expression": {
                "operand": {
                    "id": "l"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 44,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 44,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 44,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 44,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 44,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.l"
        ],
        "line": 44,
        "json": {
            "expression": {
                "operand": {
                    "id": "l"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 45,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 45,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 45,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.IntStack",
            "method.receiver.[].param.type.lit.pointer.type.name.id.IntStack",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.s",
            "method.receiver.[].param.id_list.[0].id.s",
            "method.receiver.[0].param.id_list.[].id.s",
            "method.receiver.[].param.id_list.[].id.s",
            "method.id",
            "method.id.Push",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.int",
            "method.signature.param_list.[].param.type.name.id.int",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.e",
            "method.signature.param_list.[].param.id_list.[0].id.e",
            "method.signature.param_list.[0].param.id_list.[].id.e",
            "method.signature.param_list.[].param.id_list.[].id.e"
        ],
        "line": 48,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "s"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "IntStack"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "e"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "Push"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 49,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.append"
        ],
        "line": 49,
        "json": {
            "expression": {
                "operand": {
                    "id": "append"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 49,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.e"
        ],
        "line": 49,
        "json": {
            "expression": {
                "operand": {
                    "id": "e"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.bitsPerWord"
        ],
        "line": 52,
        "json": {
            "declaration": {
                "const": {
                    "id": "bitsPerWord"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.64"
        ],
        "line": 52,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "64"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.64"
        ],
        "line": 52,
        "json": {
            "literal": {
                "basic": {
                    "int": "64"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.indexForBit",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.bit",
            "function.signature.param_list.[].param.id_list.[0].id.bit",
            "function.signature.param_list.[0].param.id_list.[].id.bit",
            "function.signature.param_list.[].param.id_list.[].id.bit",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 54,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "bit"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "indexForBit"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bit"
        ],
        "line": 55,
        "json": {
            "expression": {
                "operand": {
                    "id": "bit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bitsPerWord"
        ],
        "line": 55,
        "json": {
            "expression": {
                "operand": {
                    "id": "bitsPerWord"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.wordForBit",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.lit",
            "function.signature.param_list.[].param.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice",
            "function.signature.param_list.[].param.type.lit.slice",
            "function.signature.param_list.[0].param.type.lit.slice.type",
            "function.signature.param_list.[].param.type.lit.slice.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.name",
            "function.signature.param_list.[].param.type.lit.slice.type.name",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id.uint64",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id.uint64",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.data",
            "function.signature.param_list.[].param.id_list.[0].id.data",
            "function.signature.param_list.[0].param.id_list.[].id.data",
            "function.signature.param_list.[].param.id_list.[].id.data",
            "function.signature.param_list.[1].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[1].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[1].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[1].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[1].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[1].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[1].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[1].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[1].param.id_list.[0].id.bit",
            "function.signature.param_list.[].param.id_list.[0].id.bit",
            "function.signature.param_list.[1].param.id_list.[].id.bit",
            "function.signature.param_list.[].param.id_list.[].id.bit",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.uint64"
        ],
        "line": 59,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "uint64"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "data"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "slice": {
                                            "type": {
                                                "name": {
                                                    "id": "uint64"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "bit"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "wordForBit"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.indexForBit"
        ],
        "line": 60,
        "json": {
            "expression": {
                "operand": {
                    "id": "indexForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bit"
        ],
        "line": 60,
        "json": {
            "expression": {
                "operand": {
                    "id": "bit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 61,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 61,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data"
        ],
        "line": 61,
        "json": {
            "expression": {
                "operand": {
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 62,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 62,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data",
            "expression.operand.type_arg_list",
            "expression.operand.type_arg_list.[0].type",
            "expression.operand.type_arg_list.[].type",
            "expression.operand.type_arg_list.[0].type.name",
            "expression.operand.type_arg_list.[].type.name",
            "expression.operand.type_arg_list.[0].type.name.id",
            "expression.operand.type_arg_list.[].type.name.id",
            "expression.operand.type_arg_list.[0].type.name.id.idx",
            "expression.operand.type_arg_list.[].type.name.id.idx"
        ],
        "line": 64,
        "json": {
            "expression": {
                "operand": {
                    "type_arg_list": [
                        {
                            "type": {
                                "name": {
                                    "id": "idx"
                                }
                            }
                        }
                    ],
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.maskForBit",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.bit",
            "function.signature.param_list.[].param.id_list.[0].id.bit",
            "function.signature.param_list.[0].param.id_list.[].id.bit",
            "function.signature.param_list.[].param.id_list.[].id.bit",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.uint64"
        ],
        "line": 67,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "uint64"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "bit"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "maskForBit"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint64"
        ],
        "line": 68,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint64"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 68,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 68,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 68,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bit"
        ],
        "line": 68,
        "json": {
            "expression": {
                "operand": {
                    "id": "bit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bitsPerWord"
        ],
        "line": 68,
        "json": {
            "expression": {
                "operand": {
                    "id": "bitsPerWord"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.wordsNeeded",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.bit",
            "function.signature.param_list.[].param.id_list.[0].id.bit",
            "function.signature.param_list.[0].param.id_list.[].id.bit",
            "function.signature.param_list.[].param.id_list.[].id.bit",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 71,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "bit"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "wordsNeeded"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.indexForBit"
        ],
        "line": 72,
        "json": {
            "expression": {
                "operand": {
                    "id": "indexForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bit"
        ],
        "line": 72,
        "json": {
            "expression": {
                "operand": {
                    "id": "bit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 72,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 72,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.type",
            "declaration.type.id",
            "declaration.type.id.BitSet",
            "declaration.type.type",
            "declaration.type.type.lit",
            "declaration.type.type.lit.struct"
        ],
        "line": 75,
        "json": {
            "declaration": {
                "type": {
                    "id": "BitSet",
                    "type": {
                        "lit": {
                            "struct": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "field",
            "field.id",
            "field.id.data",
            "field.type",
            "field.type.lit",
            "field.type.lit.slice",
            "field.type.lit.slice.type",
            "field.type.lit.slice.type.name",
            "field.type.lit.slice.type.name.id",
            "field.type.lit.slice.type.name.id.uint64"
        ],
        "line": 76,
        "json": {
            "field": {
                "id": "data",
                "type": {
                    "lit": {
                        "slice": {
                            "type": {
                                "name": {
                                    "id": "uint64"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.NewBitSet",
            "function.signature",
            "function.signature.param_list",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.lit",
            "function.signature.result.type.lit.pointer",
            "function.signature.result.type.lit.pointer.type",
            "function.signature.result.type.lit.pointer.type.name",
            "function.signature.result.type.lit.pointer.type.name.id",
            "function.signature.result.type.lit.pointer.type.name.id.BitSet"
        ],
        "line": 81,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "lit": {
                                "pointer": {
                                    "type": {
                                        "name": {
                                            "id": "BitSet"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "NewBitSet"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.type",
            "expression.operand.literal.type.name",
            "expression.operand.literal.type.name.id",
            "expression.operand.literal.type.name.id.BitSet"
        ],
        "line": 82,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "type": {
                            "name": {
                                "id": "BitSet"
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.type",
            "literal.type.name",
            "literal.type.name.id",
            "literal.type.name.id.BitSet"
        ],
        "line": 82,
        "json": {
            "literal": {
                "type": {
                    "name": {
                        "id": "BitSet"
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.add",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.int",
            "method.signature.param_list.[].param.type.name.id.int",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.value",
            "method.signature.param_list.[].param.id_list.[0].id.value",
            "method.signature.param_list.[0].param.id_list.[].id.value",
            "method.signature.param_list.[].param.id_list.[].id.value"
        ],
        "line": 85,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "value"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "add"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.indexForBit"
        ],
        "line": 86,
        "json": {
            "expression": {
                "operand": {
                    "id": "indexForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 86,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 87,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 87,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 87,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.wordsNeeded"
        ],
        "line": 88,
        "json": {
            "expression": {
                "operand": {
                    "id": "wordsNeeded"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 88,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 89,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.size"
        ],
        "line": 89,
        "json": {
            "expression": {
                "operand": {
                    "id": "size"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.copy"
        ],
        "line": 90,
        "json": {
            "expression": {
                "operand": {
                    "id": "copy"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data"
        ],
        "line": 90,
        "json": {
            "expression": {
                "operand": {
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 90,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 91,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data"
        ],
        "line": 91,
        "json": {
            "expression": {
                "operand": {
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 93,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 93,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.maskForBit"
        ],
        "line": 93,
        "json": {
            "expression": {
                "operand": {
                    "id": "maskForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 93,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.clear",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.int",
            "method.signature.param_list.[].param.type.name.id.int",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.index",
            "method.signature.param_list.[].param.id_list.[0].id.index",
            "method.signature.param_list.[0].param.id_list.[].id.index",
            "method.signature.param_list.[].param.id_list.[].id.index"
        ],
        "line": 96,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "index"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "clear"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.indexForBit"
        ],
        "line": 97,
        "json": {
            "expression": {
                "operand": {
                    "id": "indexForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.index"
        ],
        "line": 97,
        "json": {
            "expression": {
                "operand": {
                    "id": "index"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 98,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 98,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 98,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 101,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 101,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.maskForBit"
        ],
        "line": 101,
        "json": {
            "expression": {
                "operand": {
                    "id": "maskForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.index"
        ],
        "line": 101,
        "json": {
            "expression": {
                "operand": {
                    "id": "index"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.or",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.lit",
            "method.signature.param_list.[].param.type.lit",
            "method.signature.param_list.[0].param.type.lit.pointer",
            "method.signature.param_list.[].param.type.lit.pointer",
            "method.signature.param_list.[0].param.type.lit.pointer.type",
            "method.signature.param_list.[].param.type.lit.pointer.type",
            "method.signature.param_list.[0].param.type.lit.pointer.type.name",
            "method.signature.param_list.[].param.type.lit.pointer.type.name",
            "method.signature.param_list.[0].param.type.lit.pointer.type.name.id",
            "method.signature.param_list.[].param.type.lit.pointer.type.name.id",
            "method.signature.param_list.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.signature.param_list.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.set",
            "method.signature.param_list.[].param.id_list.[0].id.set",
            "method.signature.param_list.[0].param.id_list.[].id.set",
            "method.signature.param_list.[].param.id_list.[].id.set"
        ],
        "line": 104,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "set"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "pointer": {
                                            "type": {
                                                "name": {
                                                    "id": "BitSet"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "or"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 106,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.set"
        ],
        "line": 107,
        "json": {
            "expression": {
                "operand": {
                    "id": "set"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.intMax"
        ],
        "line": 108,
        "json": {
            "expression": {
                "operand": {
                    "id": "intMax"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bLen"
        ],
        "line": 108,
        "json": {
            "expression": {
                "operand": {
                    "id": "bLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.setLen"
        ],
        "line": 108,
        "json": {
            "expression": {
                "operand": {
                    "id": "setLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.maxLen"
        ],
        "line": 109,
        "json": {
            "expression": {
                "operand": {
                    "id": "maxLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 109,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 109,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 111,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.maxLen"
        ],
        "line": 111,
        "json": {
            "expression": {
                "operand": {
                    "id": "maxLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.copy"
        ],
        "line": 112,
        "json": {
            "expression": {
                "operand": {
                    "id": "copy"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data"
        ],
        "line": 112,
        "json": {
            "expression": {
                "operand": {
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 112,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 113,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.data"
        ],
        "line": 113,
        "json": {
            "expression": {
                "operand": {
                    "id": "data"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 116,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 116,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 116,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.setLen"
        ],
        "line": 116,
        "json": {
            "expression": {
                "operand": {
                    "id": "setLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 116,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 117,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 117,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.set"
        ],
        "line": 117,
        "json": {
            "expression": {
                "operand": {
                    "id": "set"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 117,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.remove",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.int",
            "method.signature.param_list.[].param.type.name.id.int",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.value",
            "method.signature.param_list.[].param.id_list.[0].id.value",
            "method.signature.param_list.[0].param.id_list.[].id.value",
            "method.signature.param_list.[].param.id_list.[].id.value"
        ],
        "line": 121,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "value"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "remove"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 122,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 122,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.contains",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.int",
            "method.signature.param_list.[].param.type.name.id.int",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.value",
            "method.signature.param_list.[].param.id_list.[0].id.value",
            "method.signature.param_list.[0].param.id_list.[].id.value",
            "method.signature.param_list.[].param.id_list.[].id.value",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.bool"
        ],
        "line": 125,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "bool"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "value"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "contains"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.indexForBit"
        ],
        "line": 126,
        "json": {
            "expression": {
                "operand": {
                    "id": "indexForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 126,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 127,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 127,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 127,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 128,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.idx"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {
                    "id": "idx"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.maskForBit"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {
                    "id": "maskForBit"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 130,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 130,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.minValue",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.int"
        ],
        "line": 133,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "minValue"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 134,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 135,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 135,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 135,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 138,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bitsPerWord"
        ],
        "line": 138,
        "json": {
            "expression": {
                "operand": {
                    "id": "bitsPerWord"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bits"
        ],
        "line": 138,
        "json": {
            "expression": {
                "operand": {
                    "id": "bits"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 138,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.2147483647"
        ],
        "line": 140,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "2147483647"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.2147483647"
        ],
        "line": 140,
        "json": {
            "literal": {
                "basic": {
                    "int": "2147483647"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.equals",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.lit",
            "method.signature.param_list.[].param.type.lit",
            "method.signature.param_list.[0].param.type.lit.interface",
            "method.signature.param_list.[].param.type.lit.interface",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.other",
            "method.signature.param_list.[].param.id_list.[0].id.other",
            "method.signature.param_list.[0].param.id_list.[].id.other",
            "method.signature.param_list.[].param.id_list.[].id.other",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.bool"
        ],
        "line": 143,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "bool"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "other"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "interface": []
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "equals"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.other"
        ],
        "line": 144,
        "json": {
            "expression": {
                "operand": {
                    "id": "other"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.ok"
        ],
        "line": 145,
        "json": {
            "expression": {
                "operand": {
                    "id": "ok"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 146,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 149,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.otherBitSet"
        ],
        "line": 149,
        "json": {
            "expression": {
                "operand": {
                    "id": "otherBitSet"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 150,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 156,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.otherBitSet"
        ],
        "line": 157,
        "json": {
            "expression": {
                "operand": {
                    "id": "otherBitSet"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bLen"
        ],
        "line": 159,
        "json": {
            "expression": {
                "operand": {
                    "id": "bLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.otherLen"
        ],
        "line": 159,
        "json": {
            "expression": {
                "operand": {
                    "id": "otherLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 160,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 163,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 163,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 163,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bLen"
        ],
        "line": 163,
        "json": {
            "expression": {
                "operand": {
                    "id": "bLen"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 163,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 164,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 164,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.otherBitSet"
        ],
        "line": 164,
        "json": {
            "expression": {
                "operand": {
                    "id": "otherBitSet"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 164,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 165,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 169,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.minLen",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.int"
        ],
        "line": 172,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "minLen"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 173,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 173,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 173,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 173,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 173,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 173,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 174,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 174,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 174,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 174,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 174,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 174,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 175,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 178,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 178,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.length",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.int"
        ],
        "line": 181,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "length"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 182,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 182,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 183,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.cnt"
        ],
        "line": 184,
        "json": {
            "expression": {
                "operand": {
                    "id": "cnt"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bits"
        ],
        "line": 184,
        "json": {
            "expression": {
                "operand": {
                    "id": "bits"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.val"
        ],
        "line": 184,
        "json": {
            "expression": {
                "operand": {
                    "id": "val"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.cnt"
        ],
        "line": 186,
        "json": {
            "expression": {
                "operand": {
                    "id": "cnt"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[].param.type.lit.pointer.type.name.id.BitSet",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.b",
            "method.receiver.[].param.id_list.[0].id.b",
            "method.receiver.[0].param.id_list.[].id.b",
            "method.receiver.[].param.id_list.[].id.b",
            "method.id",
            "method.id.String",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.name",
            "method.signature.result.type.name.id",
            "method.signature.result.type.name.id.string"
        ],
        "line": 189,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "b"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "BitSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "string"
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "String"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 190,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 190,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 190,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 190,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.b"
        ],
        "line": 192,
        "json": {
            "expression": {
                "operand": {
                    "id": "b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 193,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 193,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 193,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bits"
        ],
        "line": 194,
        "json": {
            "expression": {
                "operand": {
                    "id": "bits"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 194,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.vals"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "vals"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.append"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "append"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.vals"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "vals"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strconv"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "strconv"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.bitsPerWord"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "bitsPerWord"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.n"
        ],
        "line": 195,
        "json": {
            "expression": {
                "operand": {
                    "id": "n"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 196,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 196,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint64"
        ],
        "line": 196,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint64"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 196,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 196,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.n"
        ],
        "line": 196,
        "json": {
            "expression": {
                "operand": {
                    "id": "n"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"{\""
        ],
        "line": 200,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"{\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"{\""
        ],
        "line": 200,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"{\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strings"
        ],
        "line": 200,
        "json": {
            "expression": {
                "operand": {
                    "id": "strings"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.vals"
        ],
        "line": 200,
        "json": {
            "expression": {
                "operand": {
                    "id": "vals"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\", \""
        ],
        "line": 200,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\", \""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\", \""
        ],
        "line": 200,
        "json": {
            "literal": {
                "basic": {
                    "string": "\", \""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"}\""
        ],
        "line": 200,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"}\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"}\""
        ],
        "line": 200,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"}\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.type",
            "declaration.type.id",
            "declaration.type.id.AltDict",
            "declaration.type.type",
            "declaration.type.type.lit",
            "declaration.type.type.lit.struct"
        ],
        "line": 203,
        "json": {
            "declaration": {
                "type": {
                    "id": "AltDict",
                    "type": {
                        "lit": {
                            "struct": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "field",
            "field.id",
            "field.id.data",
            "field.type",
            "field.type.lit",
            "field.type.lit.map",
            "field.type.lit.map.key",
            "field.type.lit.map.key.name",
            "field.type.lit.map.key.name.id",
            "field.type.lit.map.key.name.id.string",
            "field.type.lit.map.value",
            "field.type.lit.map.value.lit",
            "field.type.lit.map.value.lit.interface"
        ],
        "line": 204,
        "json": {
            "field": {
                "id": "data",
                "type": {
                    "lit": {
                        "map": {
                            "value": {
                                "lit": {
                                    "interface": []
                                }
                            },
                            "key": {
                                "name": {
                                    "id": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.NewAltDict",
            "function.signature",
            "function.signature.param_list",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.lit",
            "function.signature.result.type.lit.pointer",
            "function.signature.result.type.lit.pointer.type",
            "function.signature.result.type.lit.pointer.type.name",
            "function.signature.result.type.lit.pointer.type.name.id",
            "function.signature.result.type.lit.pointer.type.name.id.AltDict"
        ],
        "line": 207,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "lit": {
                                "pointer": {
                                    "type": {
                                        "name": {
                                            "id": "AltDict"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "NewAltDict"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.new"
        ],
        "line": 208,
        "json": {
            "expression": {
                "operand": {
                    "id": "new"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.AltDict"
        ],
        "line": 208,
        "json": {
            "expression": {
                "operand": {
                    "id": "AltDict"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.d"
        ],
        "line": 209,
        "json": {
            "expression": {
                "operand": {
                    "id": "d"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 209,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.d"
        ],
        "line": 210,
        "json": {
            "expression": {
                "operand": {
                    "id": "d"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.a",
            "method.receiver.[].param.id_list.[0].id.a",
            "method.receiver.[0].param.id_list.[].id.a",
            "method.receiver.[].param.id_list.[].id.a",
            "method.id",
            "method.id.Get",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.string",
            "method.signature.param_list.[].param.type.name.id.string",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.key",
            "method.signature.param_list.[].param.id_list.[0].id.key",
            "method.signature.param_list.[0].param.id_list.[].id.key",
            "method.signature.param_list.[].param.id_list.[].id.key",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.lit",
            "method.signature.result.type.lit.interface"
        ],
        "line": 213,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "a"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "AltDict"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "lit": {
                                "interface": []
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "key"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "string"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "Get"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 214,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"k-\""
        ],
        "line": 214,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"k-\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"k-\""
        ],
        "line": 214,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"k-\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 214,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 215,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 215,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.a",
            "method.receiver.[].param.id_list.[0].id.a",
            "method.receiver.[0].param.id_list.[].id.a",
            "method.receiver.[].param.id_list.[].id.a",
            "method.id",
            "method.id.put",
            "method.signature",
            "method.signature.param_list",
            "method.signature.param_list.[0].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[0].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[0].param.type.name",
            "method.signature.param_list.[].param.type.name",
            "method.signature.param_list.[0].param.type.name.id",
            "method.signature.param_list.[].param.type.name.id",
            "method.signature.param_list.[0].param.type.name.id.string",
            "method.signature.param_list.[].param.type.name.id.string",
            "method.signature.param_list.[0].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[0].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[0].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[0].param.id_list.[0].id.key",
            "method.signature.param_list.[].param.id_list.[0].id.key",
            "method.signature.param_list.[0].param.id_list.[].id.key",
            "method.signature.param_list.[].param.id_list.[].id.key",
            "method.signature.param_list.[1].param",
            "method.signature.param_list.[].param",
            "method.signature.param_list.[1].param.type",
            "method.signature.param_list.[].param.type",
            "method.signature.param_list.[1].param.type.lit",
            "method.signature.param_list.[].param.type.lit",
            "method.signature.param_list.[1].param.type.lit.interface",
            "method.signature.param_list.[].param.type.lit.interface",
            "method.signature.param_list.[1].param.id_list",
            "method.signature.param_list.[].param.id_list",
            "method.signature.param_list.[1].param.id_list.[0].id",
            "method.signature.param_list.[].param.id_list.[0].id",
            "method.signature.param_list.[1].param.id_list.[].id",
            "method.signature.param_list.[].param.id_list.[].id",
            "method.signature.param_list.[1].param.id_list.[0].id.value",
            "method.signature.param_list.[].param.id_list.[0].id.value",
            "method.signature.param_list.[1].param.id_list.[].id.value",
            "method.signature.param_list.[].param.id_list.[].id.value"
        ],
        "line": 218,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "a"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "AltDict"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "key"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "string"
                                    }
                                }
                            }
                        },
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "value"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "interface": []
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "put"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 219,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"k-\""
        ],
        "line": 219,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"k-\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"k-\""
        ],
        "line": 219,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"k-\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 219,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 220,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.key"
        ],
        "line": 220,
        "json": {
            "expression": {
                "operand": {
                    "id": "key"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 220,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "method",
            "method.receiver",
            "method.receiver.[0].param",
            "method.receiver.[].param",
            "method.receiver.[0].param.type",
            "method.receiver.[].param.type",
            "method.receiver.[0].param.type.lit",
            "method.receiver.[].param.type.lit",
            "method.receiver.[0].param.type.lit.pointer",
            "method.receiver.[].param.type.lit.pointer",
            "method.receiver.[0].param.type.lit.pointer.type",
            "method.receiver.[].param.type.lit.pointer.type",
            "method.receiver.[0].param.type.lit.pointer.type.name",
            "method.receiver.[].param.type.lit.pointer.type.name",
            "method.receiver.[0].param.type.lit.pointer.type.name.id",
            "method.receiver.[].param.type.lit.pointer.type.name.id",
            "method.receiver.[0].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[].param.type.lit.pointer.type.name.id.AltDict",
            "method.receiver.[0].param.id_list",
            "method.receiver.[].param.id_list",
            "method.receiver.[0].param.id_list.[0].id",
            "method.receiver.[].param.id_list.[0].id",
            "method.receiver.[0].param.id_list.[].id",
            "method.receiver.[].param.id_list.[].id",
            "method.receiver.[0].param.id_list.[0].id.a",
            "method.receiver.[].param.id_list.[0].id.a",
            "method.receiver.[0].param.id_list.[].id.a",
            "method.receiver.[].param.id_list.[].id.a",
            "method.id",
            "method.id.values",
            "method.signature",
            "method.signature.param_list",
            "method.signature.result",
            "method.signature.result.type",
            "method.signature.result.type.lit",
            "method.signature.result.type.lit.slice",
            "method.signature.result.type.lit.slice.type",
            "method.signature.result.type.lit.slice.type.lit",
            "method.signature.result.type.lit.slice.type.lit.interface"
        ],
        "line": 223,
        "json": {
            "method": {
                "receiver": [
                    {
                        "param": {
                            "id_list": [
                                {
                                    "id": "a"
                                }
                            ],
                            "type": {
                                "lit": {
                                    "pointer": {
                                        "type": {
                                            "name": {
                                                "id": "AltDict"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "signature": {
                    "result": {
                        "type": {
                            "lit": {
                                "slice": {
                                    "type": {
                                        "lit": {
                                            "interface": []
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "param_list": []
                },
                "id": "values"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 224,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 224,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 224,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 225,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 225,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.a"
        ],
        "line": 226,
        "json": {
            "expression": {
                "operand": {
                    "id": "a"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.vs",
            "expression.operand.type_arg_list",
            "expression.operand.type_arg_list.[0].type",
            "expression.operand.type_arg_list.[].type",
            "expression.operand.type_arg_list.[0].type.name",
            "expression.operand.type_arg_list.[].type.name",
            "expression.operand.type_arg_list.[0].type.name.id",
            "expression.operand.type_arg_list.[].type.name.id",
            "expression.operand.type_arg_list.[0].type.name.id.i",
            "expression.operand.type_arg_list.[].type.name.id.i"
        ],
        "line": 227,
        "json": {
            "expression": {
                "operand": {
                    "type_arg_list": [
                        {
                            "type": {
                                "name": {
                                    "id": "i"
                                }
                            }
                        }
                    ],
                    "id": "vs"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 227,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 228,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.vs"
        ],
        "line": 230,
        "json": {
            "expression": {
                "operand": {
                    "id": "vs"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.EscapeWhitespace",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.string",
            "function.signature.param_list.[].param.type.name.id.string",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.s",
            "function.signature.param_list.[].param.id_list.[0].id.s",
            "function.signature.param_list.[0].param.id_list.[].id.s",
            "function.signature.param_list.[].param.id_list.[].id.s",
            "function.signature.param_list.[1].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[1].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[1].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[1].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[1].param.type.name.id.bool",
            "function.signature.param_list.[].param.type.name.id.bool",
            "function.signature.param_list.[1].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[1].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[1].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[1].param.id_list.[0].id.escapeSpaces",
            "function.signature.param_list.[].param.id_list.[0].id.escapeSpaces",
            "function.signature.param_list.[1].param.id_list.[].id.escapeSpaces",
            "function.signature.param_list.[].param.id_list.[].id.escapeSpaces",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.string"
        ],
        "line": 233,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "string"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "s"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "string"
                                    }
                                }
                            }
                        },
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "escapeSpaces"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "bool"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "EscapeWhitespace"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strings"
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "id": "strings"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\t\""
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\t\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\t\""
        ],
        "line": 235,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\t\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\\\t\""
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\\\t\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\\\t\""
        ],
        "line": 235,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\\\t\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 235,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 235,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strings"
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "id": "strings"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\n\""
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\n\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\n\""
        ],
        "line": 236,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\n\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\\\n\""
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\\\n\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\\\n\""
        ],
        "line": 236,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\\\n\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 236,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 236,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strings"
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "id": "strings"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\r\""
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\r\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\r\""
        ],
        "line": 237,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\r\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\\\r\""
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\\\r\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\\\r\""
        ],
        "line": 237,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\\\r\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 237,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 237,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.escapeSpaces"
        ],
        "line": 238,
        "json": {
            "expression": {
                "operand": {
                    "id": "escapeSpaces"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.strings"
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "id": "strings"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\" \""
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\" \""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\" \""
        ],
        "line": 239,
        "json": {
            "literal": {
                "basic": {
                    "string": "\" \""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"\\u00B7\""
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"\\u00B7\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"\\u00B7\""
        ],
        "line": 239,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"\\u00B7\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 239,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 239,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 241,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.TerminalNodeToStringArray",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.lit",
            "function.signature.param_list.[].param.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice",
            "function.signature.param_list.[].param.type.lit.slice",
            "function.signature.param_list.[0].param.type.lit.slice.type",
            "function.signature.param_list.[].param.type.lit.slice.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.name",
            "function.signature.param_list.[].param.type.lit.slice.type.name",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id.TerminalNode",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id.TerminalNode",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.sa",
            "function.signature.param_list.[].param.id_list.[0].id.sa",
            "function.signature.param_list.[0].param.id_list.[].id.sa",
            "function.signature.param_list.[].param.id_list.[].id.sa",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.lit",
            "function.signature.result.type.lit.slice",
            "function.signature.result.type.lit.slice.type",
            "function.signature.result.type.lit.slice.type.name",
            "function.signature.result.type.lit.slice.type.name.id",
            "function.signature.result.type.lit.slice.type.name.id.string"
        ],
        "line": 245,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "lit": {
                                "slice": {
                                    "type": {
                                        "name": {
                                            "id": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "sa"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "slice": {
                                            "type": {
                                                "name": {
                                                    "id": "TerminalNode"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "TerminalNodeToStringArray"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.make"
        ],
        "line": 246,
        "json": {
            "expression": {
                "operand": {
                    "id": "make"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 246,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.sa"
        ],
        "line": 246,
        "json": {
            "expression": {
                "operand": {
                    "id": "sa"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.sa"
        ],
        "line": 248,
        "json": {
            "expression": {
                "operand": {
                    "id": "sa"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.st",
            "expression.operand.type_arg_list",
            "expression.operand.type_arg_list.[0].type",
            "expression.operand.type_arg_list.[].type",
            "expression.operand.type_arg_list.[0].type.name",
            "expression.operand.type_arg_list.[].type.name",
            "expression.operand.type_arg_list.[0].type.name.id",
            "expression.operand.type_arg_list.[].type.name.id",
            "expression.operand.type_arg_list.[0].type.name.id.i",
            "expression.operand.type_arg_list.[].type.name.id.i"
        ],
        "line": 249,
        "json": {
            "expression": {
                "operand": {
                    "type_arg_list": [
                        {
                            "type": {
                                "name": {
                                    "id": "i"
                                }
                            }
                        }
                    ],
                    "id": "st"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.fmt"
        ],
        "line": 249,
        "json": {
            "expression": {
                "operand": {
                    "id": "fmt"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"%v\""
        ],
        "line": 249,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"%v\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"%v\""
        ],
        "line": 249,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"%v\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 249,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.st"
        ],
        "line": 252,
        "json": {
            "expression": {
                "operand": {
                    "id": "st"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.PrintArrayJavaStyle",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.lit",
            "function.signature.param_list.[].param.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice",
            "function.signature.param_list.[].param.type.lit.slice",
            "function.signature.param_list.[0].param.type.lit.slice.type",
            "function.signature.param_list.[].param.type.lit.slice.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.name",
            "function.signature.param_list.[].param.type.lit.slice.type.name",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id.string",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id.string",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.sa",
            "function.signature.param_list.[].param.id_list.[0].id.sa",
            "function.signature.param_list.[0].param.id_list.[].id.sa",
            "function.signature.param_list.[].param.id_list.[].id.sa",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.string"
        ],
        "line": 256,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "string"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "sa"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "slice": {
                                            "type": {
                                                "name": {
                                                    "id": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "PrintArrayJavaStyle"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.var",
            "declaration.var.id",
            "declaration.var.id.buffer",
            "declaration.var.type",
            "declaration.var.type.name",
            "declaration.var.type.name.qualified_ident",
            "declaration.var.type.name.qualified_ident.package",
            "declaration.var.type.name.qualified_ident.package.bytes",
            "declaration.var.type.name.qualified_ident.id",
            "declaration.var.type.name.qualified_ident.id.Buffer"
        ],
        "line": 257,
        "json": {
            "declaration": {
                "var": {
                    "id": "buffer",
                    "type": {
                        "name": {
                            "qualified_ident": {
                                "package": "bytes",
                                "id": "Buffer"
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.buffer"
        ],
        "line": 259,
        "json": {
            "expression": {
                "operand": {
                    "id": "buffer"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"[\""
        ],
        "line": 259,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"[\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"[\""
        ],
        "line": 259,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"[\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.sa"
        ],
        "line": 261,
        "json": {
            "expression": {
                "operand": {
                    "id": "sa"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.buffer"
        ],
        "line": 262,
        "json": {
            "expression": {
                "operand": {
                    "id": "buffer"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s"
        ],
        "line": 262,
        "json": {
            "expression": {
                "operand": {
                    "id": "s"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.i"
        ],
        "line": 263,
        "json": {
            "expression": {
                "operand": {
                    "id": "i"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 263,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.sa"
        ],
        "line": 263,
        "json": {
            "expression": {
                "operand": {
                    "id": "sa"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.1"
        ],
        "line": 263,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "1"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.1"
        ],
        "line": 263,
        "json": {
            "literal": {
                "basic": {
                    "int": "1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.buffer"
        ],
        "line": 264,
        "json": {
            "expression": {
                "operand": {
                    "id": "buffer"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\", \""
        ],
        "line": 264,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\", \""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\", \""
        ],
        "line": 264,
        "json": {
            "literal": {
                "basic": {
                    "string": "\", \""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.buffer"
        ],
        "line": 268,
        "json": {
            "expression": {
                "operand": {
                    "id": "buffer"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.string",
            "expression.operand.literal.basic.string.\"]\""
        ],
        "line": 268,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "string": "\"]\""
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.string",
            "literal.basic.string.\"]\""
        ],
        "line": 268,
        "json": {
            "literal": {
                "basic": {
                    "string": "\"]\""
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.buffer"
        ],
        "line": 270,
        "json": {
            "expression": {
                "operand": {
                    "id": "buffer"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.murmurInit",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.seed",
            "function.signature.param_list.[].param.id_list.[0].id.seed",
            "function.signature.param_list.[0].param.id_list.[].id.seed",
            "function.signature.param_list.[].param.id_list.[].id.seed",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 274,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "seed"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "murmurInit"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.seed"
        ],
        "line": 275,
        "json": {
            "expression": {
                "operand": {
                    "id": "seed"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.murmurUpdate",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.h",
            "function.signature.param_list.[].param.id_list.[0].id.h",
            "function.signature.param_list.[0].param.id_list.[].id.h",
            "function.signature.param_list.[].param.id_list.[].id.h",
            "function.signature.param_list.[1].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[1].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[1].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[1].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[1].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[1].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[1].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[1].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[1].param.id_list.[0].id.value",
            "function.signature.param_list.[].param.id_list.[0].id.value",
            "function.signature.param_list.[1].param.id_list.[].id.value",
            "function.signature.param_list.[].param.id_list.[].id.value",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 278,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "h"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        },
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "value"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "murmurUpdate"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.c1",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 279,
        "json": {
            "declaration": {
                "const": {
                    "id": "c1",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0xCC9E2D51"
        ],
        "line": 279,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0xCC9E2D51"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0xCC9E2D51"
        ],
        "line": 279,
        "json": {
            "literal": {
                "basic": {
                    "int": "0xCC9E2D51"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.c2",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 280,
        "json": {
            "declaration": {
                "const": {
                    "id": "c2",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0x1B873593"
        ],
        "line": 280,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0x1B873593"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0x1B873593"
        ],
        "line": 280,
        "json": {
            "literal": {
                "basic": {
                    "int": "0x1B873593"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.r1",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 281,
        "json": {
            "declaration": {
                "const": {
                    "id": "r1",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.15"
        ],
        "line": 281,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "15"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.15"
        ],
        "line": 281,
        "json": {
            "literal": {
                "basic": {
                    "int": "15"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.r2",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 282,
        "json": {
            "declaration": {
                "const": {
                    "id": "r2",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.13"
        ],
        "line": 282,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "13"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.13"
        ],
        "line": 282,
        "json": {
            "literal": {
                "basic": {
                    "int": "13"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.m",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 283,
        "json": {
            "declaration": {
                "const": {
                    "id": "m",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.5"
        ],
        "line": 283,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "5"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.5"
        ],
        "line": 283,
        "json": {
            "literal": {
                "basic": {
                    "int": "5"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.const",
            "declaration.const.id",
            "declaration.const.id.n",
            "declaration.const.type",
            "declaration.const.type.name",
            "declaration.const.type.name.id",
            "declaration.const.type.name.id.uint32"
        ],
        "line": 284,
        "json": {
            "declaration": {
                "const": {
                    "id": "n",
                    "type": {
                        "name": {
                            "id": "uint32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0xE6546B64"
        ],
        "line": 284,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0xE6546B64"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0xE6546B64"
        ],
        "line": 284,
        "json": {
            "literal": {
                "basic": {
                    "int": "0xE6546B64"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint32"
        ],
        "line": 286,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.value"
        ],
        "line": 286,
        "json": {
            "expression": {
                "operand": {
                    "id": "value"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 287,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.c1"
        ],
        "line": 287,
        "json": {
            "expression": {
                "operand": {
                    "id": "c1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.r1"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "id": "r1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.32"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.32"
        ],
        "line": 288,
        "json": {
            "literal": {
                "basic": {
                    "int": "32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.r1"
        ],
        "line": 288,
        "json": {
            "expression": {
                "operand": {
                    "id": "r1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 289,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.c2"
        ],
        "line": 289,
        "json": {
            "expression": {
                "operand": {
                    "id": "c2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint32"
        ],
        "line": 291,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.h"
        ],
        "line": 291,
        "json": {
            "expression": {
                "operand": {
                    "id": "h"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.k"
        ],
        "line": 291,
        "json": {
            "expression": {
                "operand": {
                    "id": "k"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.r2"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "id": "r2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {}
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.32"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "32"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.32"
        ],
        "line": 292,
        "json": {
            "literal": {
                "basic": {
                    "int": "32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.r2"
        ],
        "line": 292,
        "json": {
            "expression": {
                "operand": {
                    "id": "r2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 293,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 293,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.m"
        ],
        "line": 293,
        "json": {
            "expression": {
                "operand": {
                    "id": "m"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.n"
        ],
        "line": 293,
        "json": {
            "expression": {
                "operand": {
                    "id": "n"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.int"
        ],
        "line": 294,
        "json": {
            "expression": {
                "operand": {
                    "id": "int"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 294,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.murmurFinish",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.h",
            "function.signature.param_list.[].param.id_list.[0].id.h",
            "function.signature.param_list.[0].param.id_list.[].id.h",
            "function.signature.param_list.[].param.id_list.[].id.h",
            "function.signature.param_list.[1].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[1].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[1].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[1].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[1].param.type.name.id.int",
            "function.signature.param_list.[].param.type.name.id.int",
            "function.signature.param_list.[1].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[1].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[1].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[1].param.id_list.[0].id.numberOfWords",
            "function.signature.param_list.[].param.id_list.[0].id.numberOfWords",
            "function.signature.param_list.[1].param.id_list.[].id.numberOfWords",
            "function.signature.param_list.[].param.id_list.[].id.numberOfWords",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.int"
        ],
        "line": 297,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "int"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "h"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        },
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "numberOfWords"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "int"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "murmurFinish"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "declaration",
            "declaration.var",
            "declaration.var.id",
            "declaration.var.id.hash"
        ],
        "line": 298,
        "json": {
            "declaration": {
                "var": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint32"
        ],
        "line": 298,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.h"
        ],
        "line": 298,
        "json": {
            "expression": {
                "operand": {
                    "id": "h"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 299,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.uint32"
        ],
        "line": 299,
        "json": {
            "expression": {
                "operand": {
                    "id": "uint32"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.numberOfWords"
        ],
        "line": 299,
        "json": {
            "expression": {
                "operand": {
                    "id": "numberOfWords"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.2"
        ],
        "line": 299,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "2"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.2"
        ],
        "line": 299,
        "json": {
            "literal": {
                "basic": {
                    "int": "2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 300,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 300,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.16"
        ],
        "line": 300,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "16"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.16"
        ],
        "line": 300,
        "json": {
            "literal": {
                "basic": {
                    "int": "16"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 301,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0x85ebca6b"
        ],
        "line": 301,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0x85ebca6b"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0x85ebca6b"
        ],
        "line": 301,
        "json": {
            "literal": {
                "basic": {
                    "int": "0x85ebca6b"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 302,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 302,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.13"
        ],
        "line": 302,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "13"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.13"
        ],
        "line": 302,
        "json": {
            "literal": {
                "basic": {
                    "int": "13"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 303,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0xc2b2ae35"
        ],
        "line": 303,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0xc2b2ae35"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0xc2b2ae35"
        ],
        "line": 303,
        "json": {
            "literal": {
                "basic": {
                    "int": "0xc2b2ae35"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 304,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 304,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.16"
        ],
        "line": 304,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "16"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.16"
        ],
        "line": 304,
        "json": {
            "literal": {
                "basic": {
                    "int": "16"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.int"
        ],
        "line": 306,
        "json": {
            "expression": {
                "operand": {
                    "id": "int"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.hash"
        ],
        "line": 306,
        "json": {
            "expression": {
                "operand": {
                    "id": "hash"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.isDirectory",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.name",
            "function.signature.param_list.[].param.type.name",
            "function.signature.param_list.[0].param.type.name.id",
            "function.signature.param_list.[].param.type.name.id",
            "function.signature.param_list.[0].param.type.name.id.string",
            "function.signature.param_list.[].param.type.name.id.string",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.dir",
            "function.signature.param_list.[].param.id_list.[0].id.dir",
            "function.signature.param_list.[0].param.id_list.[].id.dir",
            "function.signature.param_list.[].param.id_list.[].id.dir",
            "function.signature.result",
            "function.signature.result.param_list",
            "function.signature.result.param_list.[0].param",
            "function.signature.result.param_list.[].param",
            "function.signature.result.param_list.[0].param.type",
            "function.signature.result.param_list.[].param.type",
            "function.signature.result.param_list.[0].param.type.name",
            "function.signature.result.param_list.[].param.type.name",
            "function.signature.result.param_list.[0].param.type.name.id",
            "function.signature.result.param_list.[].param.type.name.id",
            "function.signature.result.param_list.[0].param.type.name.id.bool",
            "function.signature.result.param_list.[].param.type.name.id.bool",
            "function.signature.result.param_list.[1].param",
            "function.signature.result.param_list.[].param",
            "function.signature.result.param_list.[1].param.type",
            "function.signature.result.param_list.[].param.type",
            "function.signature.result.param_list.[1].param.type.name",
            "function.signature.result.param_list.[].param.type.name",
            "function.signature.result.param_list.[1].param.type.name.id",
            "function.signature.result.param_list.[].param.type.name.id",
            "function.signature.result.param_list.[1].param.type.name.id.error",
            "function.signature.result.param_list.[].param.type.name.id.error"
        ],
        "line": 309,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "param_list": [
                            {
                                "param": {
                                    "type": {
                                        "name": {
                                            "id": "bool"
                                        }
                                    }
                                }
                            },
                            {
                                "param": {
                                    "type": {
                                        "name": {
                                            "id": "error"
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "dir"
                                    }
                                ],
                                "type": {
                                    "name": {
                                        "id": "string"
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "isDirectory"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.os"
        ],
        "line": 310,
        "json": {
            "expression": {
                "operand": {
                    "id": "os"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.dir"
        ],
        "line": 310,
        "json": {
            "expression": {
                "operand": {
                    "id": "dir"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 311,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 311,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 311,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.errors"
        ],
        "line": 313,
        "json": {
            "expression": {
                "operand": {
                    "id": "errors"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 313,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.syscall"
        ],
        "line": 313,
        "json": {
            "expression": {
                "operand": {
                    "id": "syscall"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 316,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.os"
        ],
        "line": 316,
        "json": {
            "expression": {
                "operand": {
                    "id": "os"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.dir"
        ],
        "line": 316,
        "json": {
            "expression": {
                "operand": {
                    "id": "dir"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0755"
        ],
        "line": 316,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0755"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0755"
        ],
        "line": 316,
        "json": {
            "literal": {
                "basic": {
                    "int": "0755"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 317,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 317,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 317,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 318,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 318,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 321,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 321,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 321,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 322,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 322,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 322,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 323,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 323,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.fileInfo"
        ],
        "line": 327,
        "json": {
            "expression": {
                "operand": {
                    "id": "fileInfo"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.err"
        ],
        "line": 327,
        "json": {
            "expression": {
                "operand": {
                    "id": "err"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.intSlicesEqual",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.lit",
            "function.signature.param_list.[].param.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice",
            "function.signature.param_list.[].param.type.lit.slice",
            "function.signature.param_list.[0].param.type.lit.slice.type",
            "function.signature.param_list.[].param.type.lit.slice.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.name",
            "function.signature.param_list.[].param.type.lit.slice.type.name",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id",
            "function.signature.param_list.[0].param.type.lit.slice.type.name.id.int",
            "function.signature.param_list.[].param.type.lit.slice.type.name.id.int",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.s1",
            "function.signature.param_list.[].param.id_list.[0].id.s1",
            "function.signature.param_list.[0].param.id_list.[].id.s1",
            "function.signature.param_list.[].param.id_list.[].id.s1",
            "function.signature.param_list.[0].param.id_list.[1].id",
            "function.signature.param_list.[].param.id_list.[1].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[1].id.s2",
            "function.signature.param_list.[].param.id_list.[1].id.s2",
            "function.signature.param_list.[0].param.id_list.[].id.s2",
            "function.signature.param_list.[].param.id_list.[].id.s2",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.bool"
        ],
        "line": 332,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "bool"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "s1"
                                    },
                                    {
                                        "id": "s2"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "slice": {
                                            "type": {
                                                "name": {
                                                    "id": "int"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "intSlicesEqual"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 333,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 333,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 333,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 333,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 333,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 333,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 334,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 336,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 336,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 336,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 336,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 336,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 336,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 337,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 339,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 339,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 339,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 340,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 343,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 343,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 343,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 344,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 347,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 347,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 347,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 347,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 347,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 347,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 348,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 350,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 351,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2",
            "expression.operand.type_arg_list",
            "expression.operand.type_arg_list.[0].type",
            "expression.operand.type_arg_list.[].type",
            "expression.operand.type_arg_list.[0].type.name",
            "expression.operand.type_arg_list.[].type.name",
            "expression.operand.type_arg_list.[0].type.name.id",
            "expression.operand.type_arg_list.[].type.name.id",
            "expression.operand.type_arg_list.[0].type.name.id.i",
            "expression.operand.type_arg_list.[].type.name.id.i"
        ],
        "line": 351,
        "json": {
            "expression": {
                "operand": {
                    "type_arg_list": [
                        {
                            "type": {
                                "name": {
                                    "id": "i"
                                }
                            }
                        }
                    ],
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 352,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 355,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "function",
            "function.id",
            "function.id.pcSliceEqual",
            "function.signature",
            "function.signature.param_list",
            "function.signature.param_list.[0].param",
            "function.signature.param_list.[].param",
            "function.signature.param_list.[0].param.type",
            "function.signature.param_list.[].param.type",
            "function.signature.param_list.[0].param.type.lit",
            "function.signature.param_list.[].param.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice",
            "function.signature.param_list.[].param.type.lit.slice",
            "function.signature.param_list.[0].param.type.lit.slice.type",
            "function.signature.param_list.[].param.type.lit.slice.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit",
            "function.signature.param_list.[].param.type.lit.slice.type.lit",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit.pointer",
            "function.signature.param_list.[].param.type.lit.slice.type.lit.pointer",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit.pointer.type",
            "function.signature.param_list.[].param.type.lit.slice.type.lit.pointer.type",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit.pointer.type.name",
            "function.signature.param_list.[].param.type.lit.slice.type.lit.pointer.type.name",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit.pointer.type.name.id",
            "function.signature.param_list.[].param.type.lit.slice.type.lit.pointer.type.name.id",
            "function.signature.param_list.[0].param.type.lit.slice.type.lit.pointer.type.name.id.PredictionContext",
            "function.signature.param_list.[].param.type.lit.slice.type.lit.pointer.type.name.id.PredictionContext",
            "function.signature.param_list.[0].param.id_list",
            "function.signature.param_list.[].param.id_list",
            "function.signature.param_list.[0].param.id_list.[0].id",
            "function.signature.param_list.[].param.id_list.[0].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[0].id.s1",
            "function.signature.param_list.[].param.id_list.[0].id.s1",
            "function.signature.param_list.[0].param.id_list.[].id.s1",
            "function.signature.param_list.[].param.id_list.[].id.s1",
            "function.signature.param_list.[0].param.id_list.[1].id",
            "function.signature.param_list.[].param.id_list.[1].id",
            "function.signature.param_list.[0].param.id_list.[].id",
            "function.signature.param_list.[].param.id_list.[].id",
            "function.signature.param_list.[0].param.id_list.[1].id.s2",
            "function.signature.param_list.[].param.id_list.[1].id.s2",
            "function.signature.param_list.[0].param.id_list.[].id.s2",
            "function.signature.param_list.[].param.id_list.[].id.s2",
            "function.signature.result",
            "function.signature.result.type",
            "function.signature.result.type.name",
            "function.signature.result.type.name.id",
            "function.signature.result.type.name.id.bool"
        ],
        "line": 358,
        "json": {
            "function": {
                "signature": {
                    "result": {
                        "type": {
                            "name": {
                                "id": "bool"
                            }
                        }
                    },
                    "param_list": [
                        {
                            "param": {
                                "id_list": [
                                    {
                                        "id": "s1"
                                    },
                                    {
                                        "id": "s2"
                                    }
                                ],
                                "type": {
                                    "lit": {
                                        "slice": {
                                            "type": {
                                                "lit": {
                                                    "pointer": {
                                                        "type": {
                                                            "name": {
                                                                "id": "PredictionContext"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "id": "pcSliceEqual"
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 359,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 359,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 359,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 359,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 359,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 359,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 360,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 362,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 362,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 362,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 362,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.nil"
        ],
        "line": 362,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "nil": {}
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.nil"
        ],
        "line": 362,
        "json": {
            "literal": {
                "basic": {
                    "nil": {}
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 363,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 365,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 365,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 365,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 366,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 368,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 368,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.len"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "len"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 368,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 369,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 372,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 372,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 372,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2"
        ],
        "line": 372,
        "json": {
            "expression": {
                "operand": {
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.literal",
            "expression.operand.literal.basic",
            "expression.operand.literal.basic.int",
            "expression.operand.literal.basic.int.0"
        ],
        "line": 372,
        "json": {
            "expression": {
                "operand": {
                    "literal": {
                        "basic": {
                            "int": "0"
                        }
                    }
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "literal",
            "literal.basic",
            "literal.basic.int",
            "literal.basic.int.0"
        ],
        "line": 372,
        "json": {
            "literal": {
                "basic": {
                    "int": "0"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 373,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s1"
        ],
        "line": 375,
        "json": {
            "expression": {
                "operand": {
                    "id": "s1"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.v"
        ],
        "line": 376,
        "json": {
            "expression": {
                "operand": {
                    "id": "v"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.s2",
            "expression.operand.type_arg_list",
            "expression.operand.type_arg_list.[0].type",
            "expression.operand.type_arg_list.[].type",
            "expression.operand.type_arg_list.[0].type.name",
            "expression.operand.type_arg_list.[].type.name",
            "expression.operand.type_arg_list.[0].type.name.id",
            "expression.operand.type_arg_list.[].type.name.id",
            "expression.operand.type_arg_list.[0].type.name.id.i",
            "expression.operand.type_arg_list.[].type.name.id.i"
        ],
        "line": 376,
        "json": {
            "expression": {
                "operand": {
                    "type_arg_list": [
                        {
                            "type": {
                                "name": {
                                    "id": "i"
                                }
                            }
                        }
                    ],
                    "id": "s2"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.false"
        ],
        "line": 377,
        "json": {
            "expression": {
                "operand": {
                    "id": "false"
                }
            }
        }
    },
    {
        "file": "app/src/test/java/org/codesearch/golang/test.go",
        "keys": [
            "expression",
            "expression.operand",
            "expression.operand.id",
            "expression.operand.id.true"
        ],
        "line": 380,
        "json": {
            "expression": {
                "operand": {
                    "id": "true"
                }
            }
        }
    }
]